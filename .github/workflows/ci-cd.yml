name: CI/CD Pipeline

on:
  push:
    branches: [ main, prod ]
  pull_request:
    branches: [ main, prod ]
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: portfolio-app
  ARTIFACT_REGISTRY_REPO: portfolio-images

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-flask flake8 black
        
    - name: Run linting
      run: |
        flake8 app/ --max-line-length=88 --exclude=__pycache__
        black --check app/
        
    - name: Run unit tests
      run: |
        # pytest.ini automatically applies configuration
        pytest
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/main'
    
    # Use workload identity federation (no service account keys needed)
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
        
    - name: Generate build metadata
      id: meta
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        SHORT_SHA=${GITHUB_SHA::8}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [ "$BRANCH_NAME" = "prod" ]; then
          ENVIRONMENT="production"
          TAG="prod-${TIMESTAMP}-${SHORT_SHA}"
        else
          ENVIRONMENT="staging" 
          TAG="staging-${TIMESTAMP}-${SHORT_SHA}"
        fi
        
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "image_uri=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${TAG}" >> $GITHUB_OUTPUT
        
    - name: Build with Cloud Build
      run: |
        gcloud builds submit \
          --config=cloudbuild.yaml \
          --substitutions=_IMAGE_URI="${{ steps.meta.outputs.image_uri }}",_ENVIRONMENT="${{ steps.meta.outputs.environment }}" \
          .
          
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }}-${{ steps.meta.outputs.environment }} \
          --image="${{ steps.meta.outputs.image_uri }}" \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=${{ steps.meta.outputs.environment }}" \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --port=8080 \
          --timeout=300 \
          --concurrency=80
          
    - name: Update service tags
      run: |
        gcloud run services update-traffic ${{ env.SERVICE_NAME }}-${{ steps.meta.outputs.environment }} \
          --to-latest \
          --region=${{ env.REGION }}
          
    - name: Get service URL
      id: service-url
      run: |
        URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-${{ steps.meta.outputs.environment }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        echo "url=${URL}" >> $GITHUB_OUTPUT
        
    - name: Run health check
      run: |
        sleep 30  # Wait for service to be ready
        curl -f ${{ steps.service-url.outputs.url }}/health || exit 1
        
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed!"
        echo "Environment: ${{ steps.meta.outputs.environment }}"
        echo "Image: ${{ steps.meta.outputs.image_uri }}"
        echo "Service URL: ${{ steps.service-url.outputs.url }}"
