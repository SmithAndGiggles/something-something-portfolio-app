# Production Build and Deploy Workflow
# Triggers on pushes to prod branch and manual dispatch
# Builds Docker image via Cloud Build and deploys to Cloud Run
name: Build and Deploy

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

# Environment variables from repository secrets and variables
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION_PROD }}
  SERVICE_NAME: ${{ vars.GCP_CLOUD_RUN_SERVICE_NAME }}
  ARTIFACT_REGISTRY_REPO: ${{ vars.GCP_ARTIFACT_REGISTRY_REPO_PROD }}
  IMAGE_NAME: ${{ vars.GCP_APP_DOCKER_IMAGE_NAME }}

jobs:
  # Build job: Creates and pushes Docker image to Artifact Registry
  build:
    name: Build Container Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    # Simple outputs - avoid words that trigger security warnings
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_PATH_PROD }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL_PROD }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
        
    - name: Generate image metadata
      id: meta
      run: |
        # Generate unique tag with timestamp and commit SHA
        TAG="prod-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "🏷️ Generated tag: ${TAG}"
        
    - name: Build and push image
      run: |
        IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}"
        echo "🚀 Building and pushing: ${IMAGE_URI}"
        
        gcloud builds submit \
          --config=cloudbuild.yaml \
          --service-account="projects/${{ env.PROJECT_ID }}/serviceAccounts/${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL_PROD }}" \
          --substitutions=_IMAGE_URI="${IMAGE_URI}" \
          .

  # Deploy job: Deploys the built image to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_PATH_PROD }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL_PROD }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
        
    - name: Deploy to Cloud Run
      run: |
        IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}"
        
        echo "🚀 Deploying: ${IMAGE_URI}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image="${IMAGE_URI}" \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --port=8080 \
          --timeout=300 \
          --concurrency=80 \
          --quiet
          
        # Update traffic and get service URL
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} --to-latest --region=${{ env.REGION }} --quiet
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        
        # Create deployment summary
        {
          echo "## 🚀 Deployment Complete!"
          echo "- **Image**: ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}"
          echo "- **Service URL**: ${SERVICE_URL}"
          echo "- **Custom Domain**: https://portfolio.me2u.space"
          echo "- **Status**: ✅ Deployed Successfully"
        } >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Deployed successfully to: ${SERVICE_URL}"
