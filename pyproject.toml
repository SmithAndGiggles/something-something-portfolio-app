# ============================================================================
# Python Project Configuration - Cloud-Agnostic Portfolio Application
# ============================================================================
#
# This file defines the project metadata, dependencies, and application defaults
# following Python packaging standards and 12-factor app methodology.
#
# Configuration Philosophy:
# - Safe defaults for development and general settings
# - No cloud-specific or sensitive values (use environment variables)
# - DRY principle - single source for application metadata
# - Cloud-agnostic design for deployment flexibility

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "portfolio"
version = "0.1.0"
description = "A cloud-agnostic Flask portfolio application showcasing professional experience"
dependencies = [
    "Flask>=2.3.0",      # Modern Flask with security updates
    "gunicorn>=21.0.0",  # Production WSGI server for containerized deployments
    "toml>=0.10.0",      # Configuration file parsing
]

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================
#
# Default configuration values that can be overridden by environment variables.
# This section contains ONLY safe, non-sensitive defaults.
#
# Security Note: 
# - No cloud provider IDs, project names, or credentials
# - All deployment-specific config via environment variables
# - Safe for public repositories and open source sharing
#
# Environment Variable Override Pattern:
# 1. These defaults (lowest priority)
# 2. .env file values (development)
# 3. Environment variables (highest priority - production)

[tool.portfolio]
# Application Identity - Safe defaults for display and metadata
app_name = "Portfolio"                # Display name shown in UI and logs
version = "0.1.0"                     # Application version (semantic versioning)

# Development Server Configuration - Local development defaults
debug = true                          # Enable debug mode (override to false in production)
host = "0.0.0.0"                     # Bind to all interfaces (use "127.0.0.1" for localhost only)
port = 8080                          # Default development port

# Container Configuration - Cloud-agnostic defaults
container_image_name = "portfolio-app"  # Docker image name for builds (maps to GCP_APP_DOCKER_IMAGE_NAME)
container_tag = "latest"                 # Default container tag (override for versioning)
container_port = 8080                    # Port exposed by the container

# Cloud Run Deployment Defaults - Safe defaults for production deployment
# These map to GitHub workflow variables but remain cloud-agnostic
deployment_region = "us-central1"        # Default deployment region (override via GCP_REGION_PROD)
service_name = "portfolio-app"           # Default service name (override via GCP_CLOUD_RUN_SERVICE_NAME)
artifact_registry_repo = "portfolio-docker"  # Default registry repo (override via GCP_ARTIFACT_REGISTRY_REPO_PROD)

# Cloud Run Service Configuration - Production defaults
memory = "512Mi"                         # Memory allocation for Cloud Run service
cpu = 1                                  # CPU allocation for Cloud Run service
min_instances = 0                        # Minimum instances (scale to zero)
max_instances = 10                       # Maximum instances for scaling
timeout = 300                            # Request timeout in seconds
concurrency = 80                         # Maximum concurrent requests per instance

# Note: Sensitive and environment-specific configuration (GCP_PROJECT_ID, service account emails, etc.)
# is intentionally excluded from this file and must be set via environment variables or GitHub secrets
# for security and cloud-agnostic design.
#
# GitHub Workflow Variable Mapping:
# - container_image_name → GCP_APP_DOCKER_IMAGE_NAME
# - deployment_region → GCP_REGION_PROD  
# - service_name → GCP_CLOUD_RUN_SERVICE_NAME
# - artifact_registry_repo → GCP_ARTIFACT_REGISTRY_REPO_PROD
#
# Environment File Configuration:
# - Copy scripts/.env.example to scripts/.env.development and scripts/.env.production
# - Fill in environment-specific values (ignored by git for security)
# - Scripts automatically load appropriate environment file based on context
